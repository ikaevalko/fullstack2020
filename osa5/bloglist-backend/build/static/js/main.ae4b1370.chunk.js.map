{"version":3,"sources":["components/Blog.js","services/blogs.js","services/login.js","App.js","index.js"],"names":["React","require","Blog","blog","title","author","axios","get","then","response","data","login","credentials","a","post","App","useState","blogs","setBlogs","username","setUsername","password","setPassword","user","setUser","useEffect","blogService","handleLogin","event","preventDefault","loginService","name","map","key","id","onSubmit","type","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"2OAAMA,EAAQC,EAAQ,GAUPC,EARF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACE,2BACGA,EAAKC,MADR,IACgBD,EAAKE,S,gBCGV,EALA,WAEb,OADgBC,IAAMC,IAHR,cAICC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCG5B,GAAEC,MALN,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEACWP,IAAMQ,KAHf,aAG6BF,GAD/B,cACNH,EADM,yBAELA,EAASC,MAFJ,2CAAH,uDCoEIK,EAlEH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEgBF,mBAAS,IAFzB,mBAETG,EAFS,KAECC,EAFD,OAGgBJ,mBAAS,IAHzB,mBAGTK,EAHS,KAGCC,EAHD,OAIQN,mBAAS,MAJjB,mBAITO,EAJS,KAIHC,EAJG,KAMhBC,qBAAU,WACRC,IAAqBlB,MAAK,SAAAS,GAAK,OAC7BC,EAAUD,QAEX,IAEH,IAAMU,EAAW,uCAAG,WAAOC,GAAP,eAAAf,EAAA,6DAClBe,EAAMC,iBADY,kBAGOC,EAAanB,MAAM,CACxCQ,WAAUE,aAJI,OAGVZ,EAHU,OAOhBe,EAAQf,GACRW,EAAY,IACZE,EAAY,IATI,4GAAH,sDAcjB,OAAKC,EA8BH,oCACE,qCACCA,EAAKQ,KAFR,aAGGd,EAAMe,KAAI,SAAA7B,GAAI,OACb,kBAAC,EAAD,CAAM8B,IAAK9B,EAAK+B,GAAI/B,KAAMA,QAhC5B,oCACE,qDACA,0BAAMgC,SAAUR,GACd,wCAEI,2BACAS,KAAK,OACLC,MAAOlB,EACPY,KAAK,WACLO,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBnB,EAAYmB,EAAOF,WAGjD,wCAEI,2BACAD,KAAK,WACLC,MAAOhB,EACPU,KAAK,WACLO,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBjB,EAAYiB,EAAOF,WAGjD,4BAAQD,KAAK,UAAb,YClDVI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ae4b1370.chunk.js","sourcesContent":["const React = require('react')\n\nconst Blog = ({ blog }) => {\n  return (\n    <div>\n      {blog.title} {blog.author}\n    </div>\n  )\n}\n\nexport default Blog","import axios from 'axios'\nconst baseUrl = '/api/blogs'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nexport default { getAll }","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }","import React, { useState, useEffect } from 'react'\nimport Blog from './components/Blog'\nimport blogService from './services/blogs'\nimport loginService from './services/login'\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([])\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    blogService.getAll().then(blogs =>\n      setBlogs( blogs )\n    )  \n  }, [])\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const response = await loginService.login({\n        username, password\n      })\n\n      setUser(response)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n    }\n  }\n\n  if (!user) {\n    return (\n      <>\n        <h2>log in to application</h2>\n        <form onSubmit={handleLogin}>\n          <div>\n            username\n              <input\n              type=\"text\"\n              value={username}\n              name=\"Username\"\n              onChange={({ target }) => setUsername(target.value)}\n            />\n          </div>\n          <div>\n            password\n              <input\n              type=\"password\"\n              value={password}\n              name=\"Password\"\n              onChange={({ target }) => setPassword(target.value)}\n            />\n          </div>\n          <button type=\"submit\">login</button>\n        </form>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <h2>blogs</h2>\n      {user.name} logged in\n      {blogs.map(blog =>\n        <Blog key={blog.id} blog={blog} />\n      )}\n    </>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}