{"version":3,"sources":["services/persons.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPerson","post","personId","delete","person","put","id","Person","name","number","PersonForm","props","onSubmit","addPerson","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Persons","persons","handleRemove","map","key","onClick","Filter","filter","handleFiltering","Notification","message","style","background","fontSize","borderRadius","padding","marginBottom","Error","App","useState","setPersons","setNewName","setNewNumber","setFilter","notification","setNotification","error","setError","isError","setIsError","personsToShow","toLowerCase","includes","useEffect","personService","initialPersons","event","target","preventDefault","nameExists","forEach","window","confirm","changedPerson","returnedPerson","setTimeout","catch","e","concat","personToRemove","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.49056ca3.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  return axios\n    .get(baseUrl)\n    .then(response => response.data)\n}\n\nconst create = newPerson => {\n  return axios\n    .post(baseUrl, newPerson)\n    .then(response => response.data)\n}\n\nconst remove = personId => {\n  axios.delete(`${baseUrl}/${personId}`)\n}\n\nconst replace = person => {\n  return axios\n    .put(`${baseUrl}/${person.id}`, person)\n    .then(response => response.data)\n}\n\nexport default {getAll, create, remove, replace}","import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport personService from './services/persons'\n\nconst Person = ({ person }) => {\n  return (\n    <>\n      {person.name} {person.number}\n    </>\n  )\n}\n\nconst PersonForm = (props) => {\n  return (\n    <>\n      <form onSubmit={props.addPerson}>\n        name: <input value={props.newName} onChange={props.handleNameChange} /><br />\n        number: <input value={props.newNumber} onChange={props.handleNumberChange} /><br />\n        <button type=\"submit\">add</button>\n      </form>\n    </>\n  )\n}\n\nconst Persons = ({ persons, handleRemove }) => {\n  return (\n    <>\n      {persons.map(person =>\n        <div key={person.name}>\n          <Person person={person} />\n          <button onClick={() => handleRemove(person)}>\n            delete\n          </button>\n        </div>\n      )}\n    </>\n  )\n}\n\nconst Filter = (props) => {\n  return (\n    <>\n      filter shown with <input value={props.filter} onChange={props.handleFiltering} />\n    </>\n  )\n}\n\nconst Notification = ({ message }) => {\n\n  const notificationStyle = {\n    background: 'lightgreen',\n    fontSize: 16,\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  }\n\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div style={notificationStyle}>\n      {message}\n    </div>\n  )\n}\n\nconst Error = ({ message }) => {\n\n  const errorStyle = {\n    background: '#ff4d4d',\n    fontSize: 16,\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  }\n\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div style={errorStyle}>\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ notification, setNotification ] = useState(null)\n  const [ error, setError ] = useState(null)\n  const [ isError, setIsError ] = useState(false)\n\n  const personsToShow = persons.filter(person =>\n    person.name.toLowerCase().includes(filter.toLowerCase()))\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => setPersons(initialPersons))\n  }, [])\n\n  const addPerson = event => {\n    event.preventDefault()\n\n    let nameExists = false\n\n    persons.forEach(person => {\n      if(person.name === newName) {\n        nameExists = true\n\n        if(window.confirm(`${newName} is already added to phonebook. Replace the old number with a new one?`)) {\n\n          const changedPerson = {...person, number: newNumber}\n\n          personService\n            .replace(changedPerson)\n            .then(returnedPerson => {\n              setPersons(persons.map(person => \n                person.id !== changedPerson.id\n                ? person\n                : returnedPerson\n              ))\n              setIsError(false)\n              setNotification(`Replaced number of ${changedPerson.name}`)\n\n              setTimeout(() => {\n                setNotification(null)\n              }, 5000)\n            })\n            .catch(e => {\n              setIsError(true)\n              setError(`Information of ${changedPerson.name} has already been removed from server`)\n\n              setTimeout(() => {\n                setError(null)\n              }, 5000)\n            })\n        }\n      }\n    })\n\n    if(!nameExists) {\n      const newPerson = {\n        name: newName,\n        number: newNumber\n      }\n\n      personService\n        .create(newPerson)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setIsError(false)\n          setNotification(`Added ${newName}`)\n\n          setTimeout(() => {\n            setNotification(null)\n          }, 5000)\n        })\n        .catch(error => {\n          setIsError(true)\n          setError(error.response.data.error)\n          \n          setTimeout(() => {\n            setError(null)\n          }, 5000)\n        })\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const removePerson = personToRemove => {\n    if(window.confirm(`Delete ${personToRemove.name} ?`)) {\n      \n      personService\n        .remove(personToRemove.id)\n\n      setPersons(persons.filter(person => person.id !== personToRemove.id))\n\n      setNotification(`Deleted ${personToRemove.name}`)\n\n      setTimeout(() => {\n        setNotification(null)\n      }, 5000)\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFiltering = (event) => {\n    setFilter(event.target.value)\n  }\n\n  return (\n    <>\n      <h2>Phonebook</h2>\n      {isError\n        ? <Error message={error} />\n        : <Notification message={notification} />\n      }\n      \n      <Filter filter={filter} handleFiltering={handleFiltering} />\n\n      <h2>Add a new</h2>\n      <PersonForm addPerson={addPerson} \n                  handleNameChange={handleNameChange}\n                  handleNumberChange={handleNumberChange}\n                  newName={newName}\n                  newNumber={newNumber} />\n\n      <h2>Numbers</h2>\n      <Persons persons={personsToShow} handleRemove={removePerson} />\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nexport default App"],"sourceRoot":""}